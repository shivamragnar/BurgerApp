{"ast":null,"code":"import _objectSpread from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\src\\\\Containers\\\\BurgurBuilder\\\\BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/AuxFolder/lax';\nimport Burger from '../../Components/Burger/Burger';\nimport BuildControls from '../../Components/Burger/BuildControls/BuildControls';\nimport Modal from '../../Components/UI/Modal/Modal';\nimport OrderSummary from '../../Components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../Components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../../store/actions';\n\nvar BurgerBuilder =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BurgerBuilder, _Component);\n\n  function BurgerBuilder() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BurgerBuilder);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BurgerBuilder)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      purchasable: false,\n      purchasing: false,\n      loading: false,\n      error: null\n    };\n\n    _this.purchasableHandler = function (ingredients) {\n      var sum = Object.keys(ingredients).map(function (ingkey) {\n        return ingredients[ingkey];\n      }).reduce(function (sum, el) {\n        return sum + el;\n      }, 0);\n      return sum > 0;\n    };\n\n    _this.purchaseHandler = function () {\n      _this.setState({\n        purchasing: true\n      });\n    };\n\n    _this.modalHandler = function () {\n      _this.setState({\n        purchasing: false\n      });\n    };\n\n    _this.purchaseContinueHandler = function () {//   const orderParams = []\n      //   for (let i in this.state.ingredients) {\n      //       orderParams.push(encodeURIComponent(i) + '=' + encodeURIComponent(this.state.ingredients[i]))\n      //   }\n      //   orderParams.push('totalPrice=' + this.state.totalPrice)\n      //   const paramsData = orderParams.join('&')\n      //   this.props.history.push({\n      //       pathname : '/CheckOut',\n      //       search :'?'+paramsData\n      //   })\n    };\n\n    return _this;\n  }\n\n  _createClass(BurgerBuilder, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {} // axios.get('https://myburger-builder.firebaseio.com/ingredients.json')\n    // .then(response => {\n    //     this.setState({ingredients:response.data})\n    // })\n    // .catch(error => {\n    //     this.setState({error:error})\n    // })\n    // addIngredientHandler = (type) =>{\n    //     const oldCount = this.state.ingredients[type]\n    //     const newCount = oldCount + 1\n    //     const updatedIngredients = {\n    //         ...this.state.ingredients\n    //     }\n    //     updatedIngredients[type] = newCount\n    //     const oldPrice = this.state.totalPrice\n    //     const priceAddition = INGREDIENT_PRICES[type]\n    //     const newPrice = oldPrice + priceAddition\n    //     this.setState({ingredients : updatedIngredients, totalPrice : newPrice})\n    //     this.purchasableHandler(updatedIngredients)\n    // }\n    // removeIngredientHandler = (type) =>{\n    //     const oldCount = this.state.ingredients[type]\n    //     if (oldCount <= 0) {\n    //         return\n    //     }\n    //     const newCount = oldCount - 1\n    //     const updatedIngredients = {\n    //         ...this.state.ingredients\n    //     }\n    //     updatedIngredients[type] = newCount\n    //     const oldPrice = this.state.totalPrice\n    //     const priceSubtraction = INGREDIENT_PRICES[type]\n    //     const newPrice = oldPrice - priceSubtraction\n    //     this.setState({ingredients : updatedIngredients, totalPrice : newPrice})\n    //     this.purchasableHandler(updatedIngredients)\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var disabledInfo = _objectSpread({}, this.props.ings);\n\n      for (var key in disabledInfo) {\n        disabledInfo[key] = disabledInfo[key] <= 0;\n      }\n\n      var orderSummary = null;\n      var burger = this.state.error ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Ingredients can not be displayed \") : React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n\n      if (this.props.ings) {\n        burger = React.createElement(Aux, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(Burger, {\n          ingredients: this.props.ings,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }), React.createElement(BuildControls, {\n          addIngredient: this.props.onIngredientAdded,\n          removeIngredient: this.props.onIngredientRemoved,\n          disableOrNot: disabledInfo,\n          price: this.props.price,\n          ordered: this.purchaseHandler,\n          purchasable: this.purchasableHandler(this.props.ings),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }));\n        orderSummary = React.createElement(OrderSummary, {\n          ingredients: this.props.ings,\n          cancel: this.modalHandler,\n          continue: this.purchaseContinueHandler,\n          price: this.props.price,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        });\n      }\n\n      if (this.state.loading) {\n        orderSummary = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Aux, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        show: this.state.purchasing,\n        modalClosed: this.modalHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, orderSummary), burger);\n    }\n  }]);\n\n  return BurgerBuilder;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(state);\n  return {\n    ings: state.ingredients,\n    price: state.totalPrice\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onIngredientAdded: function onIngredientAdded(ingName) {\n      return dispatch({\n        type: actionTypes.ADD_INGREDIENT,\n        ingredientName: ingName\n      });\n    },\n    onIngredientRemoved: function onIngredientRemoved(ingName) {\n      return dispatch({\n        type: actionTypes.REMOVE_INGREDIENT,\n        ingredientName: ingName\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios));","map":{"version":3,"sources":["D:\\shivam\\ftl_projects\\BurgerApp\\src\\Containers\\BurgurBuilder\\BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BuildControls","Modal","OrderSummary","axios","Spinner","withErrorHandler","connect","actionTypes","BurgerBuilder","state","purchasable","purchasing","loading","error","purchasableHandler","ingredients","sum","Object","keys","map","ingkey","reduce","el","purchaseHandler","setState","modalHandler","purchaseContinueHandler","disabledInfo","props","ings","key","orderSummary","burger","onIngredientAdded","onIngredientRemoved","price","mapStateToProps","console","log","totalPrice","mapDispatchToProps","dispatch","ingName","type","ADD_INGREDIENT","ingredientName","REMOVE_INGREDIENT"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport Aux from '../../hoc/AuxFolder/lax';\r\nimport Burger from '../../Components/Burger/Burger'\r\nimport BuildControls from '../../Components/Burger/BuildControls/BuildControls'\r\nimport Modal from '../../Components/UI/Modal/Modal'\r\nimport OrderSummary from '../../Components/Burger/OrderSummary/OrderSummary'\r\nimport axios from '../../axios-orders'\r\nimport Spinner from '../../Components/UI/Spinner/Spinner'\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler'\r\nimport { connect } from 'react-redux'\r\nimport * as actionTypes from '../../store/actions'\r\n\r\n\r\n\r\n\r\nclass BurgerBuilder extends Component {\r\n\r\n    \r\n    state = {\r\n        \r\n       \r\n        purchasable : false,\r\n        purchasing : false,\r\n        loading : false,\r\n        error : null\r\n         \r\n    }\r\n\r\n    componentDidMount(){\r\n        // axios.get('https://myburger-builder.firebaseio.com/ingredients.json')\r\n        // .then(response => {\r\n            \r\n        //     this.setState({ingredients:response.data})\r\n        // })\r\n        // .catch(error => {\r\n        //     this.setState({error:error})\r\n        // })\r\n    }\r\n\r\n\r\n    // addIngredientHandler = (type) =>{\r\n    //     const oldCount = this.state.ingredients[type]\r\n    //     const newCount = oldCount + 1\r\n    //     const updatedIngredients = {\r\n    //         ...this.state.ingredients\r\n    //     }\r\n    //     updatedIngredients[type] = newCount\r\n    //     const oldPrice = this.state.totalPrice\r\n    //     const priceAddition = INGREDIENT_PRICES[type]\r\n    //     const newPrice = oldPrice + priceAddition\r\n    //     this.setState({ingredients : updatedIngredients, totalPrice : newPrice})\r\n    //     this.purchasableHandler(updatedIngredients)\r\n    // }\r\n\r\n    // removeIngredientHandler = (type) =>{\r\n    //     const oldCount = this.state.ingredients[type]\r\n    //     if (oldCount <= 0) {\r\n    //         return\r\n    //     }\r\n    //     const newCount = oldCount - 1\r\n    //     const updatedIngredients = {\r\n    //         ...this.state.ingredients\r\n    //     }\r\n    //     updatedIngredients[type] = newCount\r\n    //     const oldPrice = this.state.totalPrice\r\n    //     const priceSubtraction = INGREDIENT_PRICES[type]\r\n    //     const newPrice = oldPrice - priceSubtraction\r\n    //     this.setState({ingredients : updatedIngredients, totalPrice : newPrice})\r\n    //     this.purchasableHandler(updatedIngredients)\r\n    // }\r\n\r\n    purchasableHandler = (ingredients) => {\r\n        \r\n        const sum = Object.keys(ingredients).map(ingkey=>{\r\n            return ingredients[ingkey]\r\n        }).reduce((sum,el)=>{\r\n            return sum+el\r\n        },0)\r\n        return sum>0\r\n    }\r\n\r\n    purchaseHandler=()=>{\r\n        this.setState({purchasing : true})\r\n    }\r\n    modalHandler = () => {\r\n        this.setState({purchasing : false})\r\n    }\r\n    purchaseContinueHandler=()=>{\r\n    \r\n        //   const orderParams = []\r\n        //   for (let i in this.state.ingredients) {\r\n        //       orderParams.push(encodeURIComponent(i) + '=' + encodeURIComponent(this.state.ingredients[i]))\r\n        //   }\r\n        //   orderParams.push('totalPrice=' + this.state.totalPrice)\r\n        //   const paramsData = orderParams.join('&')\r\n        //   this.props.history.push({\r\n        //       pathname : '/CheckOut',\r\n        //       search :'?'+paramsData\r\n        //   })\r\n    } \r\n\r\n\r\n    render(){\r\n                const disabledInfo = {\r\n                    ...this.props.ings\r\n                }\r\n                for(let key in disabledInfo){\r\n                    disabledInfo[key] = disabledInfo[key] <= 0\r\n                }\r\n\r\n                let orderSummary = null\r\n                let burger = this.state.error ?<p>Ingredients can not be displayed </p> : <Spinner />\r\n\r\n                if(this.props.ings){\r\n\r\n                    burger = (\r\n                        <Aux>\r\n                            <Burger ingredients={this.props.ings} />\r\n                            <BuildControls \r\n                            addIngredient={this.props.onIngredientAdded}\r\n                            removeIngredient={this.props.onIngredientRemoved}\r\n                            disableOrNot={disabledInfo}\r\n                            price={this.props.price}\r\n                            ordered={this.purchaseHandler}\r\n                            purchasable={this.purchasableHandler(this.props.ings)}/>\r\n                        </Aux>\r\n                    )\r\n                    orderSummary = <OrderSummary \r\n                                        ingredients={this.props.ings}\r\n                                        cancel={this.modalHandler}\r\n                                        continue={this.purchaseContinueHandler}\r\n                                        price={this.props.price}/>\r\n                    \r\n                }\r\n                if(this.state.loading){\r\n                   \r\n                    orderSummary = <Spinner />\r\n                } \r\n                \r\n                \r\n        return (\r\n                <Aux>\r\n                    <Modal  show={this.state.purchasing} modalClosed={this.modalHandler}>\r\n                        {orderSummary}\r\n                    </Modal>\r\n                    {burger}\r\n                   \r\n                </Aux>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    console.log(state)\r\n    return {\r\n        ings : state.ingredients,\r\n        price : state.totalPrice\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onIngredientAdded : (ingName) => dispatch({type : actionTypes.ADD_INGREDIENT, ingredientName : ingName}),\r\n        onIngredientRemoved : (ingName) => dispatch ({type : actionTypes.REMOVE_INGREDIENT, ingredientName : ingName})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios))"]},"metadata":{},"sourceType":"module"}