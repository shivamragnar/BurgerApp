{"ast":null,"code":"import _defineProperty from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\src\\\\Containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../Components/UI/Input/Input';\nimport Button from '../../Components/UI/Button/Button';\nimport styles from './Auth.css';\nimport * as actions from '../../store/action/index';\nimport { connect } from 'react-redux';\n\nvar Auth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Auth, _Component);\n\n  function Auth() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Auth)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Email Address'\n          },\n          value: '',\n          touched: false,\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Your Password'\n          },\n          value: '',\n          touched: false,\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false\n        }\n      }\n    };\n\n    _this.inputChangeHandler = function (event, controlName) {\n      var updatedControls = _objectSpread({}, _this.state.controls, _defineProperty({}, controlName, _objectSpread({}, _this.state.controls[controlName], {\n        value: event.target.value,\n        valid: _this.checkValidity(event.target.value, _this.state.controls[controlName].validation),\n        touched: true\n      })));\n\n      _this.setState({\n        controls: updatedControls\n      });\n    };\n\n    _this.submitHandler = function (event) {\n      event.preventDefault();\n\n      _this.props.onAuth(_this.state.controls.email.value);\n    };\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      if (!rules) {\n        return true;\n      }\n\n      var isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== '';\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      var form = formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          invalid: !formElement.config.valid,\n          elementtype: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          touched: formElement.config.touched,\n          shouldValidate: formElement.config.validation,\n          change: function change(event) {\n            return _this2.inputChangeHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        className: styles.Auth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.submitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, form, React.createElement(Button, {\n        btnType: \"Success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"SUBMIT\")));\n    }\n  }]);\n\n  return Auth;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onAuth: function onAuth(email, password) {\n      return actions.auth(email, password);\n    }\n  };\n};\n\nexport default connect(mapDispatchToProps)(Auth);","map":{"version":3,"sources":["D:\\shivam\\ftl_projects\\BurgerApp\\src\\Containers\\Auth\\Auth.js"],"names":["React","Component","Input","Button","styles","actions","connect","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","touched","validation","required","isEmail","valid","password","minLength","inputChangeHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","rules","isValid","trim","length","maxLength","formElementsArray","key","push","id","config","form","map","formElement","mapDispatchToProps","dispatch","auth"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport Input from '../../Components/UI/Input/Input'\r\nimport Button from '../../Components/UI/Button/Button'\r\nimport styles from './Auth.css'\r\nimport * as actions from '../../store/action/index'\r\nimport {connect} from 'react-redux'\r\n\r\n\r\n\r\nclass Auth extends Component {\r\n    \r\n    state = {\r\n        controls : {\r\n            email : {\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Your Email Address'\r\n                },\r\n                value : '',\r\n                touched : false,\r\n                validation : {\r\n                    required : true,\r\n                    isEmail : true\r\n                },\r\n                valid : false\r\n            },\r\n            password : {\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'password',\r\n                    placeholder:'Your Password'\r\n                },\r\n                value : '',\r\n                touched : false,\r\n                validation : {\r\n                    required : true,\r\n                    minLength : 6\r\n                },\r\n                valid : false\r\n            }\r\n        }\r\n    }\r\n\r\n    checkValidity(value, rules){\r\n        if(!rules){\r\n            return true  \r\n        }\r\n        \r\n        \r\n        let isValid = true \r\n        if(rules.required){\r\n            isValid=value.trim()!==''\r\n        }\r\n        if(rules.minLength){\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n        if(rules.maxLength){\r\n            isValid = value.length <= rules.maxLength  && isValid\r\n        }\r\n\r\n        return isValid\r\n    }\r\n\r\n    inputChangeHandler = (event, controlName) => {\r\n     const   updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName] : {\r\n                ...this.state.controls[controlName],\r\n                value : event.target.value,\r\n                valid : this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched : true\r\n            }\r\n        }\r\n        this.setState({controls : updatedControls})\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault()\r\n        this.props.onAuth(this.state.controls.email.value)\r\n    }\r\n   \r\n   \r\n    render() {\r\n        const formElementsArray = []\r\n        for(let key in this.state.controls){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config : this.state.controls[key]\r\n            })\r\n        }\r\n        const form = formElementsArray.map(formElement => (\r\n            <Input \r\n                key={formElement.id}\r\n                invalid={!formElement.config.valid}\r\n                elementtype={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value} \r\n                touched={formElement.config.touched}\r\n                shouldValidate={formElement.config.validation}\r\n                change={(event)=>this.inputChangeHandler(event, formElement.id)}/>\r\n        ))\r\n        return (\r\n            <div className={styles.Auth}>\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth : (email, password) => actions.auth(email, password)\r\n    }\r\n}\r\n\r\nexport default connect(mapDispatchToProps)(Auth) "]},"metadata":{},"sourceType":"module"}