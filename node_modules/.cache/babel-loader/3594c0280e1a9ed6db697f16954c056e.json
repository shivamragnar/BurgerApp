{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nexport var authStart = function authStart() {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport var authSuccess = function authSuccess(token, userId) {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\nexport var authFail = function authFail(error) {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport var logout = function logout() {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userId');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport var checkAuthTimeOut = function checkAuthTimeOut(expirationTime) {\n  return function (dispatch) {\n    setTimeout(function () {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport var auth = function auth(email, password, isSignUp) {\n  return function (dispatch) {\n    var authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    var url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyDilfJaHLQTbICQgEmX2kIs_ErkUeecSCY';\n\n    if (!isSignUp) {\n      url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyDilfJaHLQTbICQgEmX2kIs_ErkUeecSCY';\n    }\n\n    dispatch(authStart());\n    axios.post(url, authData).then(function (res) {\n      var expirationDate = new Date(new Date().getTime() + res.data.expiresIn * 1000);\n      localStorage.setItem('token', res.data.idToken);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('userId', res.data.localId);\n      dispatch(authSuccess(res.data.idToken, res.data.localId));\n      console.log(\"hii this is before error\");\n      dispatch(checkAuthTimeOut(res.data.expiresIn));\n    }).catch(function (err) {\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};\nexport var setAuthRedirectPath = function setAuthRedirectPath(path) {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n};\nexport var checkAuthState = function checkAuthState() {\n  return function (dispatch) {\n    var token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      var expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate > new Date()) {\n        var userId = localStorage.getItem('userId');\n        dispatch(authSuccess(token, userId));\n        dispatch;\n      } else {\n        dispatch(logout());\n      }\n    }\n  };\n};","map":{"version":3,"sources":["D:\\shivam\\ftl_projects\\BurgerApp\\src\\store\\action\\auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeOut","expirationTime","dispatch","setTimeout","auth","email","password","isSignUp","authData","returnSecureToken","url","post","then","res","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","console","log","catch","err","response","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH","checkAuthState","getItem"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes'\r\nimport axios from 'axios'\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type : actionTypes.AUTH_START\r\n    }\r\n}\r\n\r\nexport const authSuccess = (token, userId) => {\r\n    return {\r\n        type : actionTypes.AUTH_SUCCESS,\r\n        token : token,\r\n        userId : userId\r\n    }\r\n}\r\n\r\n\r\nexport const authFail = (error) => {\r\n    return {\r\n        type : actionTypes.AUTH_FAIL,\r\n        error : error\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem('token')\r\n    localStorage.removeItem('expirationDate')\r\n    localStorage.removeItem('userId')\r\n    return {\r\n        type : actionTypes.AUTH_LOGOUT\r\n    }\r\n}\r\n\r\nexport const checkAuthTimeOut = (expirationTime) => {\r\n    return dispatch => {\r\n        setTimeout(() => {\r\n            dispatch(logout())\r\n        }, expirationTime * 1000 )\r\n    }\r\n}\r\n\r\nexport const auth = (email, password, isSignUp) => {\r\n   \r\n    return dispatch => {\r\n       const authData = {\r\n           email : email,\r\n           password : password,\r\n           returnSecureToken : true\r\n       }\r\n       let url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyDilfJaHLQTbICQgEmX2kIs_ErkUeecSCY'\r\n       if(!isSignUp){\r\n           url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyDilfJaHLQTbICQgEmX2kIs_ErkUeecSCY'\r\n       }\r\n        dispatch(authStart())\r\n        axios.post(url, authData)\r\n             .then(res => {\r\n                let expirationDate = new Date(new Date().getTime() + res.data.expiresIn * 1000)\r\n                localStorage.setItem('token', res.data.idToken)\r\n                localStorage.setItem('expirationDate', expirationDate)\r\n                localStorage.setItem('userId', res.data.localId)\r\n                dispatch(authSuccess(res.data.idToken, res.data.localId))\r\n                console.log(\"hii this is before error\")\r\n                dispatch(checkAuthTimeOut(res.data.expiresIn))\r\n             })\r\n             .catch(err => {    \r\n                 dispatch(authFail(err.response.data.error))\r\n             })\r\n    }\r\n}\r\n\r\nexport const setAuthRedirectPath = (path) => {\r\n    return {\r\n        type : actionTypes.SET_AUTH_REDIRECT_PATH,\r\n        path : path\r\n    }\r\n}\r\n\r\nexport const checkAuthState = () => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token')\r\n        if(!token){\r\n            dispatch(logout())\r\n\r\n        }else {\r\n            const expirationDate = new Date(localStorage.getItem('expirationDate'))\r\n            if(expirationDate > new Date()) {\r\n                const userId =  localStorage.getItem('userId')\r\n                dispatch(authSuccess(token, userId))\r\n                dispatch\r\n            }\r\n            else{\r\n                dispatch(logout())\r\n            }\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}