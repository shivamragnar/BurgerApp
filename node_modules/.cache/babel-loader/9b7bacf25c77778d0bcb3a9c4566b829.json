{"ast":null,"code":"import _defineProperty from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\src\\\\Containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../Components/UI/Input/Input';\nimport Button from '../../Components/UI/Button/Button';\nimport styles from './Auth.css';\nimport * as actions from '../../store/action/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../Components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\n\nvar Auth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Auth, _Component);\n\n  function Auth() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Auth)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Email Address'\n          },\n          value: '',\n          touched: false,\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Your Password'\n          },\n          value: '',\n          touched: false,\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false\n        }\n      },\n      isSignUp: true\n    };\n\n    _this.inputChangeHandler = function (event, controlName) {\n      var updatedControls = _objectSpread({}, _this.state.controls, _defineProperty({}, controlName, _objectSpread({}, _this.state.controls[controlName], {\n        value: event.target.value,\n        valid: _this.checkValidity(event.target.value, _this.state.controls[controlName].validation),\n        touched: true\n      })));\n\n      _this.setState({\n        controls: updatedControls\n      });\n    };\n\n    _this.submitHandler = function (event) {\n      event.preventDefault();\n\n      _this.props.onAuth(_this.state.controls.email.value, _this.state.controls.password.value, _this.state.isSignUp);\n    };\n\n    _this.switchAuthMode = function () {\n      _this.setState(function (prevState) {\n        return {\n          isSignUp: !prevState.isSignUp\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!buildingBurger && authRedirectPath !== \"/\") {\n        this.props.setAuthRedirectPath();\n      }\n    }\n  }, {\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      if (!rules) {\n        return true;\n      }\n\n      var isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== '';\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.controls) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.controls[key]\n        });\n      }\n\n      var form = formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          invalid: !formElement.config.valid,\n          elementtype: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          touched: formElement.config.touched,\n          shouldValidate: formElement.config.validation,\n          change: function change(event) {\n            return _this2.inputChangeHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        });\n      });\n\n      if (this.props.loading) {\n        form = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        });\n      }\n\n      var errorMessage = null;\n\n      if (this.props.error) {\n        errorMessage = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, this.props.error.message);\n      }\n\n      var authRedirect = null;\n\n      if (this.props.isAuthenticated) {\n        authRedirect = React.createElement(Redirect, {\n          to: authRedirect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: styles.Auth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, authRedirect, errorMessage, React.createElement(\"form\", {\n        onSubmit: this.submitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, form, React.createElement(Button, {\n        btnType: \"Success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"SUBMIT\")), React.createElement(Button, {\n        clicked: this.switchAuthMode,\n        btnType: \"Danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \" Switch to \", this.state.isSignUp ? 'Sign In' : 'Sign Up'));\n    }\n  }]);\n\n  return Auth;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onAuth: function onAuth(email, password, isSignUp) {\n      return dispatch(actions.auth(email, password, isSignUp));\n    },\n    onSetAuthRedirectPath: function onSetAuthRedirectPath(path) {\n      return dispatch(actions.setAuthRedirectPath(path));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["D:\\shivam\\ftl_projects\\BurgerApp\\src\\Containers\\Auth\\Auth.js"],"names":["React","Component","Input","Button","styles","actions","connect","Spinner","Redirect","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","touched","validation","required","isEmail","valid","password","minLength","isSignUp","inputChangeHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthMode","prevState","buildingBurger","authRedirectPath","setAuthRedirectPath","rules","isValid","trim","length","maxLength","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","onSetAuthRedirectPath","path"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport Input from '../../Components/UI/Input/Input'\r\nimport Button from '../../Components/UI/Button/Button'\r\nimport styles from './Auth.css'\r\nimport * as actions from '../../store/action/index'\r\nimport {connect} from 'react-redux'\r\nimport Spinner from '../../Components/UI/Spinner/Spinner'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\n\r\n\r\nclass Auth extends Component {\r\n    \r\n    state = {\r\n        controls : {\r\n            email : {\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Your Email Address'\r\n                },\r\n                value : '',\r\n                touched : false,\r\n                validation : {\r\n                    required : true,\r\n                    isEmail : true\r\n                },\r\n                valid : false\r\n            },\r\n            password : {\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'password',\r\n                    placeholder:'Your Password'\r\n                },\r\n                value : '',\r\n                touched : false,\r\n                validation : {\r\n                    required : true,\r\n                    minLength : 6\r\n                },\r\n                valid : false\r\n            }\r\n        },\r\n        isSignUp : true,\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(!buildingBurger && authRedirectPath !==\"/\"){\r\n            this.props.setAuthRedirectPath()\r\n        }\r\n    }\r\n\r\n    checkValidity(value, rules){\r\n        if(!rules){\r\n            return true  \r\n        }\r\n        \r\n        \r\n        let isValid = true \r\n        if(rules.required){\r\n            isValid=value.trim()!==''\r\n        }\r\n        if(rules.minLength){\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n        if(rules.maxLength){\r\n            isValid = value.length <= rules.maxLength  && isValid\r\n        }\r\n\r\n        return isValid\r\n    }\r\n\r\n    inputChangeHandler = (event, controlName) => {\r\n     const   updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName] : {\r\n                ...this.state.controls[controlName],\r\n                value : event.target.value,\r\n                valid : this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched : true\r\n            }\r\n        }\r\n        this.setState({controls : updatedControls})\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n       \r\n        event.preventDefault()\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp)\r\n    }\r\n\r\n    switchAuthMode = () => {\r\n        this.setState(prevState => {\r\n        return  {isSignUp : !prevState.isSignUp }\r\n        })\r\n    }\r\n   \r\n   \r\n    render() {\r\n        const formElementsArray = []\r\n        for(let key in this.state.controls){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config : this.state.controls[key]\r\n            })\r\n        }\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input \r\n                key={formElement.id}\r\n                invalid={!formElement.config.valid}\r\n                elementtype={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value} \r\n                touched={formElement.config.touched}\r\n                shouldValidate={formElement.config.validation}\r\n                change={(event)=>this.inputChangeHandler(event, formElement.id)}/>\r\n        ))\r\n        \r\n        if(this.props.loading){\r\n            form = <Spinner />\r\n        }\r\n\r\n        \r\n\r\n        let errorMessage = null \r\n\r\n        if(this.props.error){\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            )\r\n        }\r\n\r\n        let authRedirect = null\r\n       \r\n        if(this.props.isAuthenticated) {\r\n           authRedirect = <Redirect to={authRedirect} />\r\n        }\r\n\r\n        return (\r\n            <div className={styles.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button clicked={this.switchAuthMode} btnType=\"Danger\"> Switch to {this.state.isSignUp ? 'Sign In' : 'Sign Up'}</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading : state.auth.loading,\r\n        error : state.auth.error,\r\n        isAuthenticated : state.auth.token !== null,\r\n        buildingBurger : state.burgerBuilder.building,\r\n        authRedirectPath : state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth : (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath : (path) => dispatch(actions.setAuthRedirectPath(path))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)"]},"metadata":{},"sourceType":"module"}