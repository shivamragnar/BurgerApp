{"ast":null,"code":"import _objectSpread from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\src\\\\Containers\\\\CheckOut\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../Components/UI/Button/Button';\nimport styles from './ContactData.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../Components/UI/Spinner/Spinner';\nimport Input from '../../../Components/UI/Input/Input';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as burgerBuilderActions from '../../../store/action/index';\n\nvar ContactData =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactData, _Component);\n\n  function ContactData() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContactData);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContactData)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          touched: false,\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          touched: false,\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          touched: false,\n          validation: {\n            required: true,\n            minLength: 6,\n            maxLength: 6\n          },\n          valid: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Country'\n          },\n          value: '',\n          touched: false,\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your Mail'\n          },\n          value: '',\n          touched: false,\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'Cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          validation: {},\n          value: 'fastest',\n          valid: true\n        }\n      },\n      formIsValid: false,\n      home: false\n    };\n\n    _this.orderHandler = function (event) {\n      event.preventDefault();\n      var formData = {};\n\n      for (var formElementIdentifier in _this.state.orderForm) {\n        formData[formElementIdentifier] = _this.state.orderForm[formElementIdentifier].value;\n      }\n\n      _this.setState({\n        loading: true\n      });\n\n      var data = {\n        ingredients: _this.props.ings,\n        price: _this.props.price,\n        orderData: formData,\n        userId: th\n      };\n\n      _this.props.onOrderBurger(data, _this.props.token);\n    };\n\n    _this.onChangeHandler = function (event, inputElementIdentifier) {\n      var updatedForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedForm[inputElementIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = _this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedForm[inputElementIdentifier] = updatedFormElement;\n      var isFormValid = true;\n\n      for (inputElementIdentifier in updatedForm) {\n        isFormValid = updatedForm[inputElementIdentifier].valid && isFormValid;\n      }\n\n      _this.setState({\n        orderForm: updatedForm,\n        formIsValid: isFormValid\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContactData, [{\n    key: \"checkValidity\",\n    value: function checkValidity(value, rules) {\n      if (!rules) {\n        return true;\n      }\n\n      var isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== '';\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var redirect = null;\n\n      if (this.state.home) {\n        redirect = React.createElement(Redirect, {\n          to: \"/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        });\n      }\n\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var form = React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          invalid: !formElement.config.valid,\n          elementtype: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          touched: formElement.config.touched,\n          shouldValidate: formElement.config.validation,\n          change: function change(event) {\n            return _this2.onChangeHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        });\n      }), React.createElement(Button, {\n        btnType: \"Success\",\n        disabled: !this.state.formIsValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, \"Place Order \"));\n\n      if (this.props.loading) {\n        form = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: styles.ContactData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"Please Enter Your Contact Details\"), form, redirect);\n    }\n  }]);\n\n  return ContactData;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onOrderBurger: function onOrderBurger(orderData, token) {\n      return dispatch(burgerBuilderActions.purchaseBurger(orderData, token));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactData);","map":{"version":3,"sources":["D:\\shivam\\ftl_projects\\BurgerApp\\src\\Containers\\CheckOut\\ContactData\\ContactData.js"],"names":["React","Component","Button","styles","axios","Spinner","Input","Redirect","connect","withErrorHandler","burgerBuilderActions","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","touched","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","home","orderHandler","event","preventDefault","formData","formElementIdentifier","setState","loading","data","ingredients","props","ings","price","orderData","userId","th","onOrderBurger","token","onChangeHandler","inputElementIdentifier","updatedForm","updatedFormElement","target","checkValidity","isFormValid","rules","isValid","trim","length","redirect","formElementsArray","key","push","id","config","form","map","formElement","mapStateToProps","burgerBuilder","totalPrice","order","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport Button from '../../../Components/UI/Button/Button'\r\nimport styles from './ContactData.css'\r\nimport axios from '../../../axios-orders'\r\nimport Spinner from '../../../Components/UI/Spinner/Spinner'\r\nimport Input from '../../../Components/UI/Input/Input'\r\n\r\nimport {Redirect} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as  burgerBuilderActions from '../../../store/action/index'\r\n\r\n\r\n\r\n\r\nclass ContactData extends Component {\r\n\r\n    state = {\r\n        orderForm :{\r\n\r\n                name : {\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Your Name'\r\n                    },\r\n                    value : '',\r\n                    touched : false,\r\n                    validation : {\r\n                        required : true\r\n                    },\r\n                    valid : false\r\n                },\r\n                street : {\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Street'\r\n                    },\r\n                    value : '',\r\n                    touched : false,\r\n                    validation : {\r\n                        required : true\r\n                    },\r\n                    valid : false\r\n                \r\n                },\r\n                zipCode : {\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'ZIP Code'\r\n                    },\r\n                    value : '',\r\n                    touched : false,\r\n                    validation : {\r\n                        required : true,\r\n                        minLength: 6,\r\n                        maxLength: 6\r\n                    },\r\n                    valid : false\r\n                },\r\n                country : {\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'text',\r\n                        placeholder:'Your Country'\r\n                    },\r\n                    value : '',\r\n                    touched : false,\r\n                    validation : {\r\n                        required : true\r\n                    },\r\n                    valid : false\r\n                },\r\n                email : {\r\n                    elementType:'input',\r\n                    elementConfig:{\r\n                        type:'email',\r\n                        placeholder:'Your Mail'\r\n                    },\r\n                    value : '',\r\n                    touched : false,\r\n                    validation : {\r\n                        required : true\r\n                    },\r\n                    valid : false\r\n                },\r\n                deliveryMethod : {\r\n                    elementType:'select',\r\n                    elementConfig:{\r\n                      options : [\r\n                          {value:'fastest', displayValue:'Fastest'},\r\n                          {value:'Cheapest', displayValue:'Cheapest'}\r\n                        ]\r\n                    },\r\n                    validation : {},\r\n                    value : 'fastest',\r\n                    valid : true\r\n                },\r\n        },\r\n        formIsValid:false,\r\n        \r\n        home : false\r\n    }\r\n    orderHandler =  (event) =>{\r\n            event.preventDefault()\r\n            const formData ={}\r\n            for (let formElementIdentifier in this.state.orderForm){\r\n                formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\r\n            }\r\n            this.setState({loading:true})\r\n            const data = {\r\n                   ingredients : this.props.ings,\r\n                   price : this.props.price,\r\n                   orderData:formData,\r\n                   userId : th\r\n            }\r\n            this.props.onOrderBurger(data, this.props.token)\r\n\r\n    }\r\n\r\n    onChangeHandler = (event, inputElementIdentifier)=>{\r\n        const updatedForm = {\r\n            ...this.state.orderForm\r\n        }\r\n        const updatedFormElement = {\r\n            ...updatedForm[inputElementIdentifier]\r\n        }\r\n        updatedFormElement.value = event.target.value\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation)\r\n        updatedFormElement.touched=true\r\n        updatedForm[inputElementIdentifier] = updatedFormElement\r\n        let isFormValid =true\r\n        for (inputElementIdentifier in updatedForm) {\r\n            isFormValid = updatedForm[inputElementIdentifier].valid && isFormValid\r\n        }\r\n        this.setState({orderForm:updatedForm, formIsValid:isFormValid})\r\n    }\r\n\r\n\r\n    checkValidity(value, rules){\r\n        if(!rules){\r\n            return true  \r\n        }\r\n        \r\n        \r\n        let isValid = true \r\n        if(rules.required){\r\n            isValid=value.trim()!==''\r\n        }\r\n        if(rules.minLength){\r\n            isValid = value.length >= rules.minLength && isValid\r\n        }\r\n        if(rules.maxLength){\r\n            isValid = value.length <= rules.maxLength  && isValid\r\n        }\r\n\r\n        return isValid\r\n    }\r\n    render(){\r\n        let redirect = null\r\n        if(this.state.home){\r\n            redirect = <Redirect to='/' />\r\n        }\r\n        const formElementsArray = []\r\n        for(let key in this.state.orderForm){\r\n            formElementsArray.push({\r\n                id: key,\r\n                config : this.state.orderForm[key]\r\n            })\r\n        }\r\n       \r\n        let form = (<form onSubmit={this.orderHandler}>\r\n                        {formElementsArray.map(formElement=>(\r\n                            <Input \r\n                                key={formElement.id}\r\n                                invalid={!formElement.config.valid}\r\n                                elementtype={formElement.config.elementType}\r\n                                elementConfig={formElement.config.elementConfig}\r\n                                value={formElement.config.value} \r\n                                touched={formElement.config.touched}\r\n                                shouldValidate={formElement.config.validation}\r\n                                change={(event)=>this.onChangeHandler(event, formElement.id)}/>\r\n\r\n                        ))}\r\n                         \r\n                         <Button btnType='Success' disabled={!this.state.formIsValid} >Place Order </Button>\r\n                    \r\n                    </form> \r\n                    )\r\n        if(this.props.loading){\r\n            form = <Spinner />\r\n        }\r\n\r\n        return(\r\n            <div className={styles.ContactData}>\r\n                <h3>Please Enter Your Contact Details</h3>\r\n                {form}\r\n                {redirect}           \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings : state.burgerBuilder.ingredients,\r\n        price : state.burgerBuilder.totalPrice,\r\n        loading : state.order.loading,\r\n        token : state.auth.token,\r\n        userId : state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger : (orderData, token) => dispatch(burgerBuilderActions.purchaseBurger(orderData, token))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactData)"]},"metadata":{},"sourceType":"module"}