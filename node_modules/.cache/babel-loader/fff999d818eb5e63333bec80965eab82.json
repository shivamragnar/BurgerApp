{"ast":null,"code":"import _objectSpread from \"D:\\\\shivam\\\\ftl_projects\\\\BurgerApp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from '../action/actionTypes';\nimport { updateObject } from '../utility';\nvar initialState = {\n  orders: [],\n  loading: false,\n  purchasing: false\n};\n\nvar purchaseInit = function purchaseInit(state, action) {\n  return updateObject(state, {\n    purchasing: false\n  });\n};\n\nvar purchseBurgerStart = function purchseBurgerStart(state, action) {\n  return updateObject(state, {\n    loading: true\n  });\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.PURCHASE_INIT:\n      return purchaseInit(state, action);\n\n    case actionTypes.PURCHASE_BURGER_START:\n      return purchaseBur;\n\n    case actionTypes.PURCHASE_BURGER_SUCCESS:\n      var newOrder = updateObject(state, _objectSpread({}, action.orderData, {\n        id: action.orderId\n      }));\n      var updatedState = {\n        orders: state.orders.concat(newOrder),\n        loading: false,\n        purchasing: true\n      };\n      return updateObject(state, updatedState);\n\n    case actionTypes.PURCHASE_BURGER_FAIL:\n      return updateObject(state, {\n        loading: false\n      });\n\n    case actionTypes.FETCH_ORDER_START:\n      return updateObject(state, {\n        loading: true\n      });\n\n    case actionTypes.FETCH_ORDER_SUCCESS:\n      return updateObject(state, {\n        orders: action.orders,\n        loading: false\n      });\n\n    case actionTypes.FETCH_ORDER_FAIL:\n      return updateObject(state, {\n        loading: false\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:\\shivam\\ftl_projects\\BurgerApp\\src\\store\\reducer\\order.js"],"names":["actionTypes","updateObject","initialState","orders","loading","purchasing","purchaseInit","state","action","purchseBurgerStart","reducer","type","PURCHASE_INIT","PURCHASE_BURGER_START","purchaseBur","PURCHASE_BURGER_SUCCESS","newOrder","orderData","id","orderId","updatedState","concat","PURCHASE_BURGER_FAIL","FETCH_ORDER_START","FETCH_ORDER_SUCCESS","FETCH_ORDER_FAIL"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,uBAA7B;AACA,SAAQC,YAAR,QAA2B,YAA3B;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAG,EADQ;AAEjBC,EAAAA,OAAO,EAAG,KAFO;AAGjBC,EAAAA,UAAU,EAAG;AAHI,CAArB;;AAOA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACpC,SAAOP,YAAY,CAACM,KAAD,EAAQ;AAACF,IAAAA,UAAU,EAAG;AAAd,GAAR,CAAnB;AACH,CAFD;;AAIA,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAACF,KAAD,EAAQC,MAAR,EAAmB;AAC1C,SAAOP,YAAY,CAACM,KAAD,EAAQ;AAACH,IAAAA,OAAO,EAAG;AAAX,GAAR,CAAnB;AACH,CAFD;;AAIA,IAAMM,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCH,KAAiC,uEAAzBL,YAAyB;AAAA,MAAXM,MAAW;;AAE9C,UAAOA,MAAM,CAACG,IAAd;AAEI,SAAKX,WAAW,CAACY,aAAjB;AAAiC,aAAON,YAAY,CAACC,KAAD,EAAQC,MAAR,CAAnB;;AAIjC,SAAKR,WAAW,CAACa,qBAAjB;AAAyC,aAAOC,WAAP;;AAGzC,SAAKd,WAAW,CAACe,uBAAjB;AACA,UAAMC,QAAQ,GAAGf,YAAY,CAACM,KAAD,oBAAaC,MAAM,CAACS,SAApB;AAA+BC,QAAAA,EAAE,EAAGV,MAAM,CAACW;AAA3C,SAA7B;AACA,UAAMC,YAAY,GAAG;AACjBjB,QAAAA,MAAM,EAAGI,KAAK,CAACJ,MAAN,CAAakB,MAAb,CAAoBL,QAApB,CADQ;AAEjBZ,QAAAA,OAAO,EAAG,KAFO;AAGjBC,QAAAA,UAAU,EAAG;AAHI,OAArB;AAKA,aAAOJ,YAAY,CAACM,KAAD,EAAQa,YAAR,CAAnB;;AAEA,SAAKpB,WAAW,CAACsB,oBAAjB;AACA,aAAOrB,YAAY,CAACM,KAAD,EAAQ;AAACH,QAAAA,OAAO,EAAG;AAAX,OAAR,CAAnB;;AAGA,SAAKJ,WAAW,CAACuB,iBAAjB;AACA,aAAOtB,YAAY,CAACM,KAAD,EAAQ;AAACH,QAAAA,OAAO,EAAG;AAAX,OAAR,CAAnB;;AAGA,SAAKJ,WAAW,CAACwB,mBAAjB;AACA,aAAOvB,YAAY,CAACM,KAAD,EAAQ;AACvBJ,QAAAA,MAAM,EAAGK,MAAM,CAACL,MADO;AAEvBC,QAAAA,OAAO,EAAG;AAFa,OAAR,CAAnB;;AAKA,SAAKJ,WAAW,CAACyB,gBAAjB;AACA,aAAOxB,YAAY,CAACM,KAAD,EAAQ;AAACH,QAAAA,OAAO,EAAG;AAAX,OAAR,CAAnB;;AAEA;AACA,+BACQG,KADR;AApCJ;AAwCH,CA1CD;;AA4CA,eAAeG,OAAf","sourcesContent":["import * as actionTypes from '../action/actionTypes'\r\nimport {updateObject} from '../utility'\r\n\r\nconst initialState = {\r\n    orders : [],\r\n    loading : false,\r\n    purchasing : false\r\n\r\n}\r\n\r\nconst purchaseInit = (state, action) => {\r\n    return updateObject(state, {purchasing : false})\r\n}\r\n\r\nconst purchseBurgerStart = (state, action) => {\r\n    return updateObject(state, {loading : true})\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case actionTypes.PURCHASE_INIT : return purchaseInit(state, action)\r\n        \r\n        \r\n         \r\n        case actionTypes.PURCHASE_BURGER_START : return purchaseBur\r\n       \r\n        \r\n        case actionTypes.PURCHASE_BURGER_SUCCESS : \r\n        const newOrder = updateObject(state, { ...action.orderData, id : action.orderId})\r\n        const updatedState = {\r\n            orders : state.orders.concat(newOrder),\r\n            loading : false,\r\n            purchasing : true   \r\n        }\r\n        return updateObject(state, updatedState)\r\n\r\n        case actionTypes.PURCHASE_BURGER_FAIL : \r\n        return updateObject(state, {loading : false})\r\n         \r\n\r\n        case actionTypes.FETCH_ORDER_START : \r\n        return updateObject(state, {loading : true})\r\n         \r\n\r\n        case actionTypes.FETCH_ORDER_SUCCESS : \r\n        return updateObject(state, { \r\n            orders : action.orders,\r\n            loading : false})\r\n           \r\n\r\n        case actionTypes.FETCH_ORDER_FAIL : \r\n        return updateObject(state, {loading : false})\r\n         \r\n        default : \r\n        return {\r\n             ...state\r\n        }\r\n    }\r\n}\r\n\r\nexport default reducer"]},"metadata":{},"sourceType":"module"}